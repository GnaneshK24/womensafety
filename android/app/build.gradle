plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.gms.google-services'
    id 'dev.flutter.flutter-gradle-plugin'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.womensafety"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion "27.0.12077973"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main.assets.srcDirs += ['../../assets']
    }

    defaultConfig {
        applicationId "com.womensafety"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation platform('com.google.firebase:firebase-bom:32.7.4')
    implementation 'com.google.firebase:firebase-analytics'
}

task printSigningReport {
    doLast {
        android.signingConfigs.each { config ->
            println "Signing config '$config.name'"
            println "Keystore: $config.storeFile"
            def keystore = project.file(config.storeFile)
            if (keystore.exists()) {
                println "Keystore file exists"
                exec {
                    commandLine 'keytool', '-list', '-v',
                            '-keystore', config.storeFile,
                            '-storepass', config.storePassword,
                            '-keypass', config.keyPassword,
                            '-alias', config.keyAlias
                }
            } else {
                println "Keystore file does not exist: $keystore.absolutePath"
            }
        }
        
        // Check debug keystore
        def debugKeystorePath = System.getProperty('user.home') + '/.android/debug.keystore'
        println "Debug keystore path: $debugKeystorePath"
        def debugKeystore = project.file(debugKeystorePath)
        if (debugKeystore.exists()) {
            println "Debug keystore exists"
            exec {
                commandLine 'keytool', '-list', '-v',
                        '-keystore', debugKeystorePath,
                        '-alias', 'androiddebugkey',
                        '-storepass', 'android',
                        '-keypass', 'android'
            }
        } else {
            println "Debug keystore does not exist: $debugKeystore.absolutePath"
        }
    }
} 